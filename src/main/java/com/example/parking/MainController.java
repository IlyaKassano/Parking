package com.example.parking;

import com.example.parking.domain.ClientEntity;
import com.example.parking.repos.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Map;
import java.util.Optional;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/database") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    @ResponseBody
    public String addNewUser (@RequestParam String fio, @RequestParam(value = "telephone") Optional<String> telephone,
                              Map<String, Object> model) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        if (!fio.isEmpty() || fio != "") {
            String[] fio_spl = fio.split(" ");
            if(fio_spl.length > 1) {
                ClientEntity n = new ClientEntity();
                n.setFirstName(fio_spl[0]);
                n.setLastName(fio_spl[1]);
                if (fio_spl.length == 3)
                    n.setSecondName(fio_spl[2]);

                n.setTelephone(telephone.get());

                clientRepository.save(n);
            }
        }

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);

        return "client";
    }

    @GetMapping(path="/add")
    public String showAllClients (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);

        return "client";
    }

    /*@GetMapping
    public Iterable<ClientEntity> getAllUsers() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }*/
}