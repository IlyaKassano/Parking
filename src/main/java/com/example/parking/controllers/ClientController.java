package com.example.parking.controllers;

import com.example.parking.entities.ClientEntity;
import com.example.parking.repos.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.*;

@Controller // This means that this class is a Controller
//@RequestMapping(path="/database") // This means URL's start with /demo (after Application path)
public class ClientController {
    @Autowired // This means to get the bean called clientRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @GetMapping(path="/clientAdd")
    public String showAllClients () {
        return "clientAdd";
    }

    @PostMapping(path="/clientAdd") // Map ONLY POST Requests
    public String addNewClient (@RequestParam String fio, @RequestParam(value = "telephone") Optional<String> telephone) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        ArrayList<String> fio_arr = getFio(fio);
        //Вставка данных в БД
        try {
            ClientEntity c = new ClientEntity();
            c.setFirstName(fio_arr.get(0));
            c.setLastName(fio_arr.get(1));
            if (fio_arr.size() > 2)
                c.setSecondName(fio_arr.get(2));
            c.setTelephone(telephone.get());

            clientRepository.save(c);
        }
        catch(Exception e) {
            //TODO Обработка ошибки
            return "redirect:/error/addDbError";
        }

        return "redirect:/clientAll";
    }

    @GetMapping(path="/clientEdit")
    public String getToEditClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientEdit";
    }

    @GetMapping(path="/clientEdit/{id}")
    public String getToEditClient (@PathVariable(value = "id") int idClient, Map<String, Object> model) {
        List<ClientEntity> clients = clientRepository.findByIdClient(idClient);

        model.put("clients", clients);
        return "clientEdit";
    }

    @PostMapping(path="/clientEdit")
    public String editClient (@RequestParam int idClient, Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "redirect:/clientEdit/" + idClient;
    }

    @PostMapping(path="/clientEdit/{id}")
    public String editByIdClient (@PathVariable(value = "id") int idClient, @RequestParam String fio,
                                @RequestParam(value = "telephone") Optional<String> telephone, Map<String, Object> model) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        ArrayList<String> fio_arr = getFio(fio);

        //Вставка данных в БД
        try {
            client.setFirstName(fio_arr.get(0));
            client.setLastName(fio_arr.get(1));
            if (fio_arr.size() > 2)
                client.setSecondName(fio_arr.get(2));
            client.setTelephone(telephone.get());

            clientRepository.save(client);
        }
        catch (Exception e){
            System.out.println(e.getMessage());
            return "redirect:/error/addDbError";
        }

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientEdit";
    }

    @GetMapping(path="/clientDelete")
    public String getAllDeleteClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();

        model.put("clients", clients);
        return "clientDelete";
    }

    @GetMapping(path="/clientDelete/{id}")
    public String getToDeleteClient (@PathVariable(value = "id") int idClient, Map<String, Object> model) {
        List<ClientEntity> clients = clientRepository.findByIdClient(idClient);

        model.put("clients", clients);
        return "clientDelete";
    }

    @PostMapping(path="/clientDelete")
    public String deleteClient (@RequestParam int idClient, Map<String, Object> model) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        clientRepository.delete(client);

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientDelete";
    }

    @PostMapping(path="/clientDelete/{id}")
    public String deleteClientWithId (@RequestParam int idClient, Map<String, Object> model) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        clientRepository.delete(client);

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientDelete";
    }

    @GetMapping(path="/clientAll")
    public String getAllClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();

        model.put("clients", clients);
        return "clientAll";
    }

    //FIXME clientEdit/clientEdit/filter
    @PostMapping("clientAll")
    public String filter (@RequestParam String fio, Map<String, Object> model)
    {
        List<ClientEntity> clients;
        ArrayList<String> fio_arr = getFio(fio);

        if (fio_arr.size() > 2) {
            clients = clientRepository.findByLastNameContainsAndFirstNameContainsAndSecondNameContainsAllIgnoreCase(
                    fio_arr.get(0), fio_arr.get(1), fio_arr.get(2)
            );
        } else if (fio_arr.size() > 1) {
           clients = clientRepository.findByLastNameContainsAndFirstNameContainsAllIgnoreCase(
                    fio_arr.get(0), fio_arr.get(1)
            );
        } else {
            clients = clientRepository.findByLastNameContainsIgnoreCase(fio_arr.get(0));
        }

        model.put("clients", clients);
        return "clientAll";
    }

    /**
     * Разделение ФИО на части
     * @param fio Полное ФИО
     * @return Фамилия, имя, отчество
     */
    private ArrayList<String> getFio(String fio) {
        ArrayList<String> fio_arr = new ArrayList<String>(3);
        String[] fio_spl = fio.split(" ");
        fio_arr.addAll(Arrays.asList(fio_spl));
        return fio_arr;
    }
}