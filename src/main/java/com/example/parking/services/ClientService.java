package com.example.parking.services;

import com.example.parking.entities.ClientEntity;
import com.example.parking.interfaces.IClientService;
import com.example.parking.repos.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.*;

@RestController
public class ClientService implements IClientService {
    @Autowired // This means to get the bean called clientRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    public ClientService() {

    }

    public String showAllClients () {
        return "clientAdd";
    }

    public String addNewClient (String fio, Optional<String> telephone, final HttpServletResponse response) {
        ClientEntity c = new ClientEntity();
        insertToDb(c, fio, telephone, response);

        return "redirect:/clientAll";
    }

    public String getToEditClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientEdit";
    }

    public String getOneToEditClient (int idClient, Map<String, Object> model) {
        List<ClientEntity> clients = clientRepository.findByIdClient(idClient);

        model.put("clients", clients);
        return "clientEdit";
    }

    public String editClient (int idClient, Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "redirect:/clientEdit/" + idClient;
    }

    public String editByIdClient (int idClient, String fio, Optional<String> telephone,
                                  Map<String, Object> model, HttpServletResponse response) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        insertToDb(client, fio, telephone, response);

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientEdit";
    }

    public String getAllDeleteClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();

        model.put("clients", clients);
        return "clientDelete";
    }

    public String getToDeleteClient (@PathVariable(value = "id") int idClient, Map<String, Object> model) {
        List<ClientEntity> clients = clientRepository.findByIdClient(idClient);

        model.put("clients", clients);
        return "clientDelete";
    }

    public String deleteClient (int idClient, Map<String, Object> model) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        clientRepository.delete(client);

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientDelete";
    }

    public String deleteClientWithId (int idClient, Map<String, Object> model) {
        ClientEntity client = clientRepository.findById(idClient).orElseThrow();
        clientRepository.delete(client);

        Iterable<ClientEntity> clients = clientRepository.findAll();
        model.put("clients", clients);
        return "clientDelete";
    }

    public String getAllClient (Map<String, Object> model) {
        Iterable<ClientEntity> clients = clientRepository.findAll();

        model.put("clients", clients);
        return "clientAll";
    }

    public String filter (String fio, Map<String, Object> model)
    {
        List<ClientEntity> clients;
        ArrayList<String> fio_arr = getFio(fio);

        if (fio_arr.size() > 2) {
            clients = clientRepository.findByLastNameContainsAndFirstNameContainsAndSecondNameContainsAllIgnoreCase(
                    fio_arr.get(0), fio_arr.get(1), fio_arr.get(2)
            );
        } else if (fio_arr.size() > 1) {
            clients = clientRepository.findByLastNameContainsAndFirstNameContainsAllIgnoreCase(
                    fio_arr.get(0), fio_arr.get(1)
            );
        } else {
            clients = clientRepository.findByLastNameContainsIgnoreCase(fio_arr.get(0));
        }

        model.put("clients", clients);
        return "clientAll";
    }

    /**
     * Разделение ФИО на части
     * @param fio Полное ФИО
     * @return Фамилия, имя, отчество
     */
    private ArrayList<String> getFio(String fio) {
        ArrayList<String> fio_arr = new ArrayList<String>(3);
        String[] fio_spl = fio.split(" ");
        fio_arr.addAll(Arrays.asList(fio_spl));
        return fio_arr;
    }

    public void insertToDb(ClientEntity c, String fio, Optional<String> telephone, HttpServletResponse response){
        ArrayList<String> fio_arr = getFio(fio);
        //Вставка данных в БД
        try {
            c.setFirstName(fio_arr.get(0));
            c.setLastName(fio_arr.get(1));
            if (fio_arr.size() > 2)
                c.setSecondName(fio_arr.get(2));
            c.setTelephone(telephone.get());

            clientRepository.save(c);
        }
        catch(Exception e) {
            try {
                response.sendError(461);
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }
    }
}
